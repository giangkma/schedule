{"version":3,"sources":["image/avatar-default.png","AuthService/index.js","components/Schedule/index.js","components/pageLoading/index.js","components/Login/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AuthService","domain","fetchDataSchedulesApi","fullName","requestOptions","header","Accept","method","redirect","axios","then","res","Promise","resolve","this","views","lessons","startTimeHours","startTimeMinutes","endTimeHours","endTimeMinutes","Schedule","props","optionChanged","e","setState","currentDate","value","handleMenuClose","anchorEl","renderMenu","state","isMenuOpen","Boolean","Menu","className","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","onClick","logOut","history","replace","localStorage","removeItem","handleProfileMenuOpen","currentTarget","Date","data","Auth","getItem","status","getData","newData","Object","keys","map","day","dayMiniSecond","YEAR","getFullYear","MONTH","getMonth","DAY","getDate","item","subject","text","address","lesson","index","startDate","endDate","push","Swal","fire","Fragment","IconButton","edge","aria-label","aria-controls","aria-haspopup","color","src","avatar","alt","onOptionChanged","dataSource","defaultCurrentView","height","startDayHour","endDayHour","React","Component","withRouter","PageLoading","Login","onChangeInput","target","onSubmitFormLogin","a","trim","length","split","match","showLoadding","setItem","setTimeout","showAlert","hideLoadding","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","icon","title","FormControl","variant","InputLabel","Select","labelId","onChange","label","Button","App","path","component","exact","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4efac882.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar-default.17b08a8e.png\";","import axios from 'axios';\r\n\r\nexport default class AuthService {\r\n    constructor(domain) {\r\n        this.domain =\r\n            domain || 'https://5f3a9d2f2300b100169a8efe.mockapi.io';\r\n    }\r\n\r\n    fetchDataSchedulesApi = (fullName) => {\r\n        const headers = {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        };\r\n        const requestOptions = {\r\n            header: headers,\r\n            method: 'GET',\r\n            redirect: 'follow',\r\n        };\r\n\r\n        return axios(`${this.domain}/${fullName}`, requestOptions).then((res) => {\r\n            return Promise.resolve(res);\r\n        });\r\n    };\r\n}\r\n","import { IconButton } from \"@material-ui/core\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport Scheduler from \"devextreme-react/scheduler\";\r\nimport React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport Swal from \"sweetalert2\";\r\nimport avatar from \"../../image/avatar-default.png\";\r\nimport AuthService from \"../../AuthService\";\r\nimport \"./style.css\";\r\n\r\nconst views = [\"agenda\", \"month\", \"day\", \"week\"];\r\nconst lessons = [\"1,2,3\", \"4,5,6\", \"7,8,9\", \"10,11,12\", \"13,14,15,16\"];\r\nconst startTimeHours = [7, 9, 12, 15, 18];\r\nconst startTimeMinutes = [0, 35, 30, 5, 0];\r\nconst endTimeHours = [9, 12, 14, 17, 21];\r\nconst endTimeMinutes = [25, 0, 55, 30, 15];\r\n\r\nclass Schedule extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: new Date(),\r\n            data: [],\r\n            anchorEl: null,\r\n            fullName: null,\r\n        };\r\n        this.Auth = new AuthService();\r\n    }\r\n    componentDidMount() {\r\n        const { history } = this.props;\r\n        const fullName = localStorage.getItem(\"fullName\");\r\n        if (!fullName) {\r\n            history.replace(\"/schedule\");\r\n            Swal.fire(\"Bạn chưa nhập tên của bạn?\", \"\", \"error\");\r\n        }\r\n        else {\r\n            this.setState({\r\n                ...this.state,\r\n                fullName: fullName,\r\n            });\r\n            this.Auth.fetchDataSchedulesApi(fullName).then((res) => {\r\n                if (res.status === 200) {\r\n                    const getData = res.data[0];\r\n                    const newData = [];\r\n                    const listDays = Object.keys(getData);\r\n                    listDays.map((day) => {\r\n                        const dayMiniSecond = day * 1;\r\n                        const YEAR = new Date(dayMiniSecond).getFullYear();\r\n                        const MONTH = new Date(dayMiniSecond).getMonth();\r\n                        const DAY = new Date(dayMiniSecond).getDate();\r\n                        getData[day].map((item) => {\r\n                            const subject = {};\r\n                            subject.text = `${item.subject} - ${item.address}`;\r\n                            lessons.map((lesson, index) => {\r\n                                if (lesson === item.lesson) {\r\n                                    subject.startDate = new Date(\r\n                                        YEAR,\r\n                                        MONTH,\r\n                                        DAY,\r\n                                        startTimeHours[index],\r\n                                        startTimeMinutes[index]\r\n                                    );\r\n                                    subject.endDate = new Date(\r\n                                        YEAR,\r\n                                        MONTH,\r\n                                        DAY,\r\n                                        endTimeHours[index],\r\n                                        endTimeMinutes[index]\r\n                                    );\r\n                                }\r\n                            });\r\n                            newData.push(subject);\r\n                        });\r\n                        return newData;\r\n                    });\r\n                    this.setState({\r\n                        data: newData,\r\n                    });\r\n                } else {\r\n                    history.replace(\"/schedule\");\r\n                    Swal.fire(\"Đã sảy ra lỗi?\", \"\", \"error\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n    optionChanged = (e) => {\r\n        if (e.fullName === \"currentDate\") {\r\n            this.setState({\r\n                currentDate: e.value,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleMenuClose = () => {\r\n        this.setState({\r\n            anchorEl: null,\r\n        });\r\n    };\r\n\r\n    renderMenu = () => {\r\n        const { anchorEl } = this.state;\r\n        const isMenuOpen = Boolean(anchorEl);\r\n        return (\r\n            <Menu\r\n                className=\"menu-account\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                id=\"menu\"\r\n                keepMounted\r\n                transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                open={isMenuOpen}\r\n                onClose={this.handleMenuClose}\r\n            >\r\n                <div className=\"user-account\">\r\n                    <MenuItem onClick={this.logOut}>Đăng xuất</MenuItem>\r\n                </div>\r\n            </Menu>\r\n        );\r\n    };\r\n\r\n    logOut = () => {\r\n        const { history } = this.props;\r\n        history.replace(\"/schedule\");\r\n        localStorage.removeItem(\"fullName\");\r\n    };\r\n\r\n    handleProfileMenuOpen = (e) => {\r\n        this.setState({\r\n            anchorEl: e.currentTarget,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { data, fullName } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"schedule-container\">\r\n                    <div className=\"schedule-title\">\r\n                        <DateRangeIcon />\r\n                        <p>Thời khóa biểu KMA</p>\r\n                    </div>\r\n                    <div className=\"icon-account\">\r\n                        <p>{`Xin chào ${fullName} !`}</p>\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"menu\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={this.handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <div className=\"icon-account-avatar\">\r\n                                <img\r\n                                    className=\"avatar-img\"\r\n                                    src={avatar}\r\n                                    alt=\"avatar\"\r\n                                />\r\n                            </div>\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n                {this.renderMenu()}\r\n                <Scheduler\r\n                    onOptionChanged={this.optionChanged}\r\n                    dataSource={data}\r\n                    views={views}\r\n                    defaultCurrentView={\"month\"}\r\n                    currentDate={this.state.currentDate}\r\n                    height={600}\r\n                    startDayHour={6}\r\n                    endDayHour={22}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Schedule);\r\n","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst PageLoading = () => {\r\n    return (\r\n      <div className=\"container-page-loading\">\r\n        <span className=\"custom-page-loading\">\r\n          <span>{`4`}</span>\r\n          <span>{`0`}</span>\r\n          <span>{`5`}</span>\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default PageLoading;","import Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport Swal from \"sweetalert2\";\r\nimport AuthService from \"../../AuthService\";\r\nimport PageLoading from \"../pageLoading\";\r\nimport \"./style.css\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showLoadding: false,\r\n            fullName: \"\",\r\n        };\r\n        this.Auth = new AuthService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const fullName = localStorage.getItem(\"fullName\");\r\n        if (fullName) {\r\n            const { history } = this.props;\r\n            history.replace(\"/schedule/view\");\r\n        }\r\n    }\r\n\r\n    onChangeInput = (e) => {\r\n        this.setState({\r\n            ...this.state,\r\n            fullName: e.target.value,\r\n        });\r\n    };\r\n\r\n    onSubmitFormLogin = async () => {\r\n        const { history } = this.props;\r\n        const { fullName } = this.state;\r\n        if (!fullName) {\r\n            Swal.fire(\r\n                \"Vui lòng nhập tên của bạn !\",\r\n                \"vd: dangtruonggiang\",\r\n                \"error\"\r\n            );\r\n        } else if (\r\n            typeof fullName === \"undefined\" ||\r\n            fullName.trim().length < fullName.length ||\r\n            fullName.split(\" \").length > 1 ||\r\n            fullName === null ||\r\n            !fullName.match(/^[0-9a-zA-Z]{0,}$/)\r\n        ) {\r\n            Swal.fire(\r\n                \"Tài khoản hoặc Mật khẩu của bạn không đúng định dạng !\",\r\n                \"\",\r\n                \"error\"\r\n            );\r\n        } else if (fullName !== \"dangtruonggiang\") {\r\n            Swal.fire(\"Tôi không biết bạn là ai !\", \"\", \"error\");\r\n        } else {\r\n            this.showLoadding();\r\n            await this.Auth.fetchDataSchedulesApi(fullName).then((res) => {\r\n                if (res.status === 200) {\r\n                    localStorage.setItem(\"fullName\", fullName);\r\n                    setTimeout(() => {\r\n                        this.showAlert(true);\r\n                        this.hideLoadding();\r\n                        history.replace(\"/schedule/view\");\r\n                    }, 1500);\r\n                } else {\r\n                    this.showAlert(false);\r\n                    setTimeout(() => {\r\n                        this.hideLoadding();\r\n                    }, 1500);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    showAlert = (status) => {\r\n        const Toast = Swal.mixin({\r\n            toast: true,\r\n            position: \"top-end\",\r\n            showConfirmButton: false,\r\n            timer: 5000,\r\n            timerProgressBar: true,\r\n            onOpen: (toast) => {\r\n                toast.addEventListener(\"mouseenter\", Swal.stopTimer);\r\n                toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\r\n            },\r\n        });\r\n        Toast.fire({\r\n            icon: `${status ? \"success\" : \"error\"}`,\r\n            title: `${\r\n                status\r\n                    ? \"Đăng nhập thành công !\"\r\n                    : \"Đã xảy ra lỗi ! Hãy kiểm tra lại !\"\r\n            }`,\r\n        });\r\n    };\r\n    showLoadding = () => {\r\n        this.setState({\r\n            showLoadding: true,\r\n        });\r\n    };\r\n    hideLoadding = () => {\r\n        this.setState({\r\n            showLoadding: false,\r\n        });\r\n    };\r\n    render() {\r\n        const { showLoadding, fullName } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                {showLoadding ? (\r\n                    <div className=\"loadding\">\r\n                        <PageLoading />\r\n                    </div>\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n                <div className=\"background\">\r\n                    <div className=\"login\">\r\n                        <h1>Thời Khóa biểu KMA</h1>\r\n                        <form className=\"login-form\">\r\n                            <div className=\"login-form-account\">\r\n                                <FormControl variant=\"outlined\" className=\"\">\r\n                                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                                        Họ và Tên\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-outlined-label\"\r\n                                        id=\"demo-simple-select-outlined\"\r\n                                        value={fullName}\r\n                                        onChange={this.onChangeInput}\r\n                                        label=\"Họ và tên\"\r\n                                    >\r\n                                        <MenuItem value=\"dangtruonggiang\">\r\n                                            Đặng Trường Giang\r\n                                        </MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </div>\r\n                            <Button\r\n                                onClick={this.onSubmitFormLogin}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                            >\r\n                                GO\r\n                            </Button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(Login);\r\n","import React, { Component } from 'react';\r\nimport Schedule from './components/Schedule';\r\nimport Login from './components/Login';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route path=\"/schedule/view\" component={() => <Schedule />} />\r\n                    <Route\r\n                        path=\"/schedule\"\r\n                        exact\r\n                        component={() => <Login />}\r\n                    />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}